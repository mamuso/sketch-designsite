var com = com ? com : {};
com.mamuso = com.mamuso ? com.mamuso : {};

com.mamuso.tools = {
  // -------------------------------------------------------------------
  // Find an object by name in a given scope
  // -------------------------------------------------------------------
  findObjectsByName: function(name,scope) {
    var predicate = NSPredicate.predicateWithFormat("name == %@",name);
    return scope.filteredArrayUsingPredicate(predicate);
  },

  // -------------------------------------------------------------------
  // Find an object by type in a given scope
  // -------------------------------------------------------------------
  findObjectsOfType: function(classType,scope) {
    var predicate = NSPredicate.predicateWithFormat("self isKindOfClass: %@",classType);
    return scope.filteredArrayUsingPredicate(predicate);
  },

  // -------------------------------------------------------------------
  // Get the solid color of a shape
  // -------------------------------------------------------------------
  getColor: function(object) {
    try{
      var fills = object.style().fills();
      if (fills.count() > 0 && fills.firstObject().fillType() == 0) { 
        return "#" + fills.firstObject().color().hexValue().toString();
      }
    } catch (e) {
      return nil;
    }
  },

  // -------------------------------------------------------------------
  // Make slice and export
  // -------------------------------------------------------------------
  sliceAndExport: function(obj, filename) {
    var rect = MSSliceTrimming.trimmedRectForSlice(obj),
    slice = MSExportRequest.requestWithRect_scale(rect, com.mamuso.config.scale);
    com.mamuso.config.doc.saveArtboardOrSlice_toFile(slice, filename);
  },

  // -------------------------------------------------------------------
  // Let the user specify a directory
  // -------------------------------------------------------------------
  getDirFromPrompt: function() {
    // We need to check if we have access to the dropbox design site folder
    var dropboxConfig = JSON.parse(NSString.stringWithContentsOfFile(NSHomeDirectory().stringByAppendingPathComponent('.dropbox/info.json')));
    if(dropboxConfig.business.path && dropboxConfig.business.is_team == 1){
      com.mamuso.config.dropboxConfigPath = NSString.stringWithFormat("%@", dropboxConfig.business.path).stringByAppendingPathComponent(com.mamuso.config.dropboxPath);
      com.mamuso.config.dropboxProjectsPath = NSURL.fileURLWithPath(NSString.stringWithFormat("%@", dropboxConfig.business.path).stringByAppendingPathComponent(com.mamuso.config.dropboxPath).stringByAppendingPathComponent("projects"));
      var panel = [NSOpenPanel openPanel];
      [panel setMessage:"ðŸŽŸ Choose an existing project or create a new folder"];
      [panel setCanChooseDirectories: true];
      [panel setCanChooseFiles: false];
      [panel setCanCreateDirectories: true];
      [panel setDirectoryURL:com.mamuso.config.dropboxProjectsPath];
      if ([panel runModal] == NSOKButton) {
        var message = [panel filename];
        if(message == com.mamuso.config.dropboxConfigPath + "/projects"){
          var alert = NSAlert.alloc().init();
          alert.setMessageText("NOT HERE! ðŸ™…");
          alert.addButtonWithTitle('OK');
          alert.setInformativeText("Make a new folder for your designs or pick an existing one.")
          alert.runModal();          
          return null;
        } else {
          return message;
        }
      } else {
        return null;
      }
    } else {
      return null;
    }
  },

  // -------------------------------------------------------------------
  // Import Frameworks
  // -------------------------------------------------------------------
  loadFramework: function(pluginRoot, frameworkName) {
    if (NSClassFromString(frameworkName) == null) {
      var mocha = [Mocha sharedRuntime];
      return [mocha loadFrameworkWithName:frameworkName inDirectory:pluginRoot];
    } else {
      return true;
    }
  },

  // -------------------------------------------------------------------
  // Text to Markdown
  // -------------------------------------------------------------------
  markdownToHTML: function(text) {
    var html = [MMMarkdown HTMLStringWithMarkdown:text error:null];
    return html;
  },

  cleanFolder: function(dirToEmpty) {
    var manager = [NSFileManager defaultManager];
    var error = null;
    files = manager.contentsOfDirectoryAtPath_error(dirToEmpty, error);
    for(i=0; i<files.count(); i++) {
      file = files[i];
      [manager removeItemAtPath:[dirToEmpty stringByAppendingPathComponent:file] error:error];
    }    
  },

  // -------------------------------------------------------------------
  // Exec, from https://github.com/mathieudutour/git-sketch-plugin/blob/master/Git.sketchplugin/Contents/Sketch/shared.cocoascript
  // -------------------------------------------------------------------
  exec: function(command) {
    var task = NSTask.alloc().init();
    var pipe = NSPipe.pipe();
    var errPipe = NSPipe.pipe();

    task.setLaunchPath_(@"/bin/bash");
    task.setArguments_(NSArray.arrayWithObjects_("-c", command, nil));
    task.setStandardOutput_(pipe);
    task.setStandardError_(errPipe);
    task.launch();

    var data = errPipe.fileHandleForReading().readDataToEndOfFile();
    if (data != nil && data.length())
    {
      var message = NSString.alloc().initWithData_encoding_(data, NSUTF8StringEncoding);
      return NSException.raise_format_("failed", message);
    }
    data = pipe.fileHandleForReading().readDataToEndOfFile();
    return NSString.alloc().initWithData_encoding_(data, NSUTF8StringEncoding);
  },

  // -------------------------------------------------------------------
  // Pulling
  // -------------------------------------------------------------------
  gitPull: function() {
    var command = NSString.stringWithFormat_("\\cd \"%@\" && \\git pull", com.mamuso.config.dropboxConfigPath);
    var stdout = com.mamuso.tools.exec(command);
    log(stdout);
  },


  // -------------------------------------------------------------------
  // Commit and Push
  // -------------------------------------------------------------------
  gitPush: function() {
    var command = NSString.stringWithFormat_("\\cd \"%@\" && \\git add * && \\git commit -m 'Commit from the plugin' && \\git push", com.mamuso.config.dropboxConfigPath);
    var stdout = com.mamuso.tools.exec(command);
    log(stdout);
  },


  // -------------------------------------------------------------------
  // Get the hash history of the file
  // -------------------------------------------------------------------
  gitLogHash: function(file) {
    var versions = []
    var command = NSString.stringWithFormat_("\\cd \"%@\" && \\git log --pretty=format:\'%%H\' \"%@\"", com.mamuso.config.dropboxConfigPath, file);
    var stdout = com.mamuso.tools.exec(command);
    var revisions = stdout.componentsSeparatedByString(@"\n");

    for(i=0; i<revisions.count(); i++) {
      if(revisions[i] != "") {
        versions.push("      - " +  revisions[i] + "\n");
      }
    }    
    return versions;
  },

};